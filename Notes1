1. Count the number of digits in a number 
(int)Math.log10(n) + 1

2.Integer to String
Integer.toString(12)  --> "12"
Integet.toHexString(10) -> 0Xa

3. Space Complexities
Bubble Sort - O(1)
Insertion Sort - O(1)
Merge Sort - O(n)
Quick Sort - O(log n) for stack frames recursion.

4. () exclusive brackets
   [] inclusive brackets
  
5. Arrays.sort uses quick sort for primitive types and merge sort for Objects.
Quick is not stable where as merge sort is.
After java7, For objects --> Tim(Merge + Insert) Sort and for primitive types --> Dual Pivot Quick Sort

6. Minimum Spanning Tree
 1. prim's algorithm O(E+V lgV)
 2.kruskal's algorithm  O(E logV).
   Kruskal can have better performance if the edges can be sorted in linear time, or are already sorted.
   Prim's better if the number of edges to vertices is high
 3. Borůvka's algorithm
 Borůvka's algorithm is a greedy algorithm for finding a minimum spanning tree in a graph for which all edge weights are distinct,
 or a minimum spanning forest in the case of a graph that is not connected.


7. Reservoir Sampling 
It is used when n is unknown

8. Number of subsets/sequences in an array of length n is 2^n including {} empty subset.
   Number of subarrays in an array of length n = n*(n+1)/2

9. Josephus problem
   n soldiers = 2^a + l (express the number in the highest power of 2) 12 = 2^3 + 4; 15 = 2^3 + 7;
   answer = 2l + 1 is the soldier wins
   
10. File Operations
File file = new File(path);
File[] files = file.listFiles();
file.isDirectory()
file.length() size in long (bytes)

11. Union Find 
Percolation problem
https://www.coursera.org/lecture/algorithms-part1/union-find-applications-OLXM8

12. B-Tree

13. Knuth-Fisher-Yates shuffle
https://stackoverflow.com/questions/1519736/random-shuffling-of-an-array

14.Langford pairing
https://en.wikipedia.org/wiki/Langford_pairing

15. TreeMap methods
floorKey()
ceilingKey()
higherKey() strictly greater
lowerKey()
subMap(fromKey, toKey);
subMap(fromKey, inclusive, toKey, inclusive);
clear();

16
// from -128 to 127 java cache the value, after 127 the hashcode for reference would be different
Integer a = 127;
Integer b = 127;
a == b // true

Integer a = 128;
Integer b = 128;
a == b // false

int a = 128;
Integer b = 128;
a == b // true

17. Height Balanced Tree - AVL 

18. Stable Sorting Algorithm
Insertion sort
Merge Sort
Bubble Sort

19. Lower bound on number of comparisons done in a typical sorting algorithm? Ans: O(nlog(n))

20  print list
list.forEach(System.out::println);

21. 1000 --> 1 << (c-1) or i << (c-1-i) where i is the index starts from 0
c is the lenght & c = 4

22. Bitwise AND of all subarrays = Bitwise AND of an array

23. Add elements to queue
Queue<String> queue = new LinkedList<>();
queue.addAll(Arrays.asList(str.split(",)));

24. 2D matrix indexes
m - rows
n - cols
index - 0 to m*n-1

at index [mid/col][mid%col]

25. import java.util.concurrent.*;
   ThreadLocalRandom.current().nextInt(2, 5); [2,5)
  
26. Lagrange's Theorem any natural number can be constructed by the sum of squares, 1, 2, 3, 4.
if 4, => 4^k(8m+7)

27 
to use Pair<Integer, TreeNode> pair = new Pair<>();
import javafx.util.Pair;
pair.getKey();
pair.getValue();

28 String[] values = "255.255.244.255".split("\\.");
\\ is important for . split to work
"." string is needed instead of char
"\\w+" -> regex for word
"\\W+" -> regex for non word

29. Deque Operation
Deque q = new ArrayDeque();
peekFirst (head/recently inserted)
peekLast  (Tail/first inserted)
removeFirst
removeLast
addFirst
addLast

30. To create immutable class
1. make class final
2. make all variables final
3. initial parameterized constructor
4. no setters
5. only getters

31. Binary Search nuances
1. nums[low] <= nums[mid]
2. nums[mid] < nums[high]
3. low = mid & high = mid-1 might result in stackoverflow exception
4. using low<=high to return from loop and low < high to return outside of loop

32.Round off decimal digit
import java.math.RoundingMode;
import java.text.DecimalFormat;
RoundingMode.DOWN
RoundingMode.UP
DecimalFormat df = new DecimalFormat("0.00");
df.format(4.5343);

33. Querternary Search
https://stackoverflow.com/questions/39845641/quaternary-search-algorithm


